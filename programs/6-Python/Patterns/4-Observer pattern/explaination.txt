The observer method is a Behavioral design Pattern which allows you to define or create
 a subscription mechanism to send the notification to the multiple objects about any new event
  that happens to the object that they are observing. The subject is basically observed by multiple objects.
   The subject needs to be monitored and whenever there is a change in the subject, the observers are being notified
    about the change. This pattern defines one to Many dependencies between objects so that one object changes state, 
     all of its dependents are notified and updated automatically.




     Solution using Observer Method

Let's discuss the solution to the above-described problem. Here comes the object Subject into the limelight.
 But it also notifies the other objects also that's why we generally call it Publisher. All the objects that want
  to track changes in the publisher's state are called subscribers.


  Advantages

 

    Open/Closed Principle: Introducing subscriber classes is much easier in Observer method as compared to others
     without making changes in the client's code.
    
    Establishes Relationships: Its really easy to establishes the relationships at the runtime between the objects.
    
    Description: It carefully describes about the coupling present between the objects and the observer. Hence,
     there is no need to modify Subject to add or remove observers.





  Disadvantages

 

    Memory Leakage: Memory leaks caused by Lapsed Listener Problem because of explicit register and unregistering of observers.
    
    Random Notifications: All the subscribers present gets notification in the random order.
    
    Risky Implementations: If the pattern is not implemented carefully, there are huge chances that you will end up
     with large complexity code.




  Applicability

 

     Multi-Dependency: We should use this pattern when multiple objects are dependent on the state of one object as 
     it provides a neat and well tested design for the same.

     Getting Notifications: It is used in social media, RSS feeds, email subscription in which you have the option to follow 
     or subscribe and you receive latest notification.

     Reflections of Object: When we do not coupled the objects tightly, then the change of a state in one object must be reflected
      in another object.    
 

