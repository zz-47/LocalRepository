Stack :

A stack is a fundamental data structure that follows the Last-In, First-Out (LIFO) principle. 
Imagine a stack of plates; you add (push) new plates to the top, and when you need a plate,
 you remove (pop) the top one first. This means the last element added to the stack is the 
 first one to be removed. Stacks are commonly used in programming for tasks like undo 
 mechanisms, function call management, and parsing expressions. 


1 - List as a Stack:

    You can use Python's built-in list to simulate a stack.

    The two main operations are:

        >> Push: append() method to add an element to the top of the stack.

        >> Pop: pop() method to remove and return the top element.


2 - collections.deque (Double-ended queue) as a Stack:

    deque (from the collections module) can be used as a more efficient stack. 
     It allows O(1) operations for both append and pop.


3 - Stack using a Custom Class:

     You can also implement your own stack class to enforce stack-specific methods like push() and pop().
     which is same as 1st project.


4 - Stack using queue.LifoQueue:

     The queue module has a class called LifoQueue that also implements a stack-like structure. 
      It's thread-safe, meaning it can be used in multi-threaded environments.     