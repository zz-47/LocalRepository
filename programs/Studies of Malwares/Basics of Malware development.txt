
 Q : Why to studie malwares ?

  A : Hackers use malwares and exploits , for specific vulnerabilities , so before building malwares
       they deeply reverse engineer the sites , OS , or app etc. , having vulnerabilities opened in front of b them
         , at the end of the day we can say , " Hackers are reverse engineers , that studie structural weaknessess
            and use them the their or the owner firm of the system as an ethical hacker ." ,
               
               >> important :      In the whole reverse engineering process , most important thing is studie
                                    of formatiomn of that program / app , which helps them find bugs , and
                                                  breach points to secure or attack.


  .i.e Path of development of malwares :



Input : sourcecode -->

   > C programming 
   > Windows API 
   > Process injection
   > Obfuscation (making programm unintelligable / unclear)   
   > Encryprtion
   > Anti Debugging 
   > Packers  

---> Output : malware.exe                               

          , nut before that we are required to learn whole engineering process by reverse to see 
           vulnerabilities and customize above path , so we can make a malware.


      Fun Fact :
                  In reverse engineering process , thier comes a phenomenon , that makes reverse engineering impossible 
            TL;DR , means a slang for " too long ; didn't read " , which is used to summarize lenghty content
             requiring us to waste alot of time init , this also has many widespread aspects of online 
               communication in Cybersecurity.



      >>> Processes and Memory :

                                if we open task manager we'll see two types of processiess
                                >  user move processies 
                                > system processies (part of os and have highest privilleges)

        if we use a tool .i.e process hacker it shows us a unique identifier which is known as (pit)

             pit/process identifier is a crucial part for a malware developer , this is required to get

              a handle to a process using this handle we can do an thing we want to do with that process

              i.e allocating memory , modifying privilleges of certain page in memory.

        >> layout of memory is  important for above process :

           the memory (R.A.M) consists multiple  blocks which are called page.
           , each page has propertie i.e
           > range of addresss
           > security flags
           > exicution permissions i.e read write and execut
           > page type which tells us if page is commited ,reserved or even both

          Memory layout bits 

            >> 32bit process :
            
            memory address size = 4 bytes 
            word = 2 bytes
            Dword (doubleword) = 4 bytes
            Qword (quadword)  = 8 bytes

            >> 64bit process :

            memory address size = 8 bytes   // double than 32 bits // maximum size memory adress size = Qword/4bytes
            word = 2 bytes  
            Dword = 4 bytes
            Qword = 8 bytes


      >>> Shellcode :  
                     In simple language shellcode is a simple code that achieves a purpose.

                    .i.e you can consider  a PAYLOAD (complex command) , that executes a shell command
                      or reverse shell command  OR even even pops a signal

            >> Method 1 :    
                 we use HEX editor for checking shell codes , which shows print able strings
                   . then if we open that with a DEBUGGER , there shows bunch of assembly structures

            >> Method 2 : 

                  why we don,t use shell codes as a function the call it into the main as an exicutable
                  , by calling that function a runtime function ?

                   A : This is not done on purpose , so the antiviruses & EDR (endtime detection and rspose)
                    , donot detect the malicious code , as the executables produces are merely prone to the detection 
                      , thus stopping the process.
                           
         // btw this whole bypass system of malware is equal to cat and mouse chase.

                 Todays antiviruses just scan for signatures and malicious behavour of malware,as sus windowz API's

                    which immediately flags your malware as suspicious

                     , we can not even run a plain shellcode to execute a reverse shell and and hard code 
                     , the system flags it,  as a threat. because each antivirus has a huge database having signatures
                      of shelcodes to detect .

                Thats why encryption comes in the game to prevent detection of shell code
                  here a specific cryptography algorithm  known as " rc4 " , comes in
                      , due to which algorithm system uinderstands and decrypts the code.
                      , then executes it


        >>> The Windows API :
                           the last important terminologies we need to understand is " WINDOWS API's " 

                               , these are a granted tool to help developers , with extreme funckin 
                                  complexities present is windows OS.

                             // the application can be a simple claculator to a a AAA game

                      we use the .dll , as functions that can break through any thing.

                         .i.e if use simple python script to import functions of library " kernel32.dll "
                           and extract and import 

                     , we'll observe the API .i.e "virtural aloc" , become a remote threat , 
                       that can overwrite or alocate memory address to processies   and many more API functions 
                         with different capabilities , btw all are provided on windows help section
                             which help malicious devs alot

                             // word , Dword and Qword are part of Windows API'say

                        // if you are confused by any definition u can check windows documentations
                        

          >> C Structs :

                      In C a struct is like a structure that stores different types of data togather.

                       its like a custome data type you can create to store group related pieces of info.
              

              // i.e we can use structs to group different datatypes i.e int , double , float ,char etc.
                under one structure , used by windows api to detect and use

                // for all the Windows api functions we (#include <windows.h>)


       >>> Injection Attacks :

                The best ways to prevent the antivirus or EDR detection is file less attacks / injection

                 file less attacks , that only take actions in memory and don't even touch the disk
                      
                   we know that each processies take up memory address , we'll give advantage to our
                      
                     malicious code using this loophole.
                      
                       we'll add our shellcode to a process so b it can be injected automatically,

                    This injection takes place in 2 steps :

                 1 -  Allocation of memory : disguise the shellcode with a normal processie.\
                
                 2 - Write Shellcode : then remove disguise and surprisingly attack the allocated memory location.
                                          and execute the shellcode.

            >> Self-Injection :
                               
                               the / shellcodes can only be written in assebly and if you don't know

                          assembly youcan grab desired shellcode / use kali linux metasploit to generate



                  yup You've learn't the process but u need to be more mature in C concepts for further development.
                                                    .i.e structs 

                                                 
                                                  ERROR - 404 




                                   

                                      



                          






